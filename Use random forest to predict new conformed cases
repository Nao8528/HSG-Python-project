import numpy as np
import pandas as pd
import matplotlib as mlt 
import datetime as dt
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import matplotlib.dates as mdates
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn import  ensemble, preprocessing, metrics

#Import all datas
AG=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_AG_total.csv")
AI=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_AI_total.csv")
AR=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_AR_total.csv")
BE=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_BE_total.csv")
BL=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_BL_total.csv")
BS=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_BS_total.csv")
FR=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_FR_total.csv")
GE=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_GE_total.csv")
GL=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_GL_total.csv")
GR=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_GR_total.csv")
JU=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_JU_total.csv")
LU=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_LU_total.csv")
NE=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_NE_total.csv")
NW=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_NW_total.csv")
OW=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_OW_total.csv")
SG=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_SG_total.csv")
SH=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_SH_total.csv")
SO=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_SO_total.csv")
SZ=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_SZ_total.csv")
TG=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_TG_total.csv")
TI=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_TI_total.csv")
UR=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_UR_total.csv")
VD=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_VD_total.csv")
VS=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_VS_total.csv")
ZG=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_ZG_total.csv")
ZH=pd.read_csv("https://raw.githubusercontent.com/openZH/covid_19/master/fallzahlen_kanton_total_csv_v2/COVID19_Fallzahlen_Kanton_ZH_total.csv")
R_numbers=pd.read_csv("https://raw.githubusercontent.com/covid-19-Re/dailyRe-Data/master/CHE-estimates.csv")

#Calculate new confirmed cases and merge cumulated cases, mean of R numbers and recovery cases
cantons=[GE,GR,BE,AG,AI,AR,BL,BS,FR,GL,JU,LU,NE,NW,OW,SG,SH,SO,SZ,TG,TI,UR,VD,VS,ZG,ZH]
cantons_namelist=["GE","GR","BE","AG","AI","AR","BL","BS","FR","GL","JU","LU","NE","NW","OW","SG","SH","SO","SZ","TG","TI","UR","VD","VS","ZG","ZH"]
#first-merge all data by "ncumul_conf"
for i in range(0,len(cantons)):
    cantons[i].index=cantons[i]["date"]
Confirmed_cases=pd.DataFrame(np.random.randn(len(GE.index),1),index=GE.index)

for i in range(0,len(cantons)):
    Confirmed_cases=pd.merge(Confirmed_cases,cantons[i]["ncumul_conf"].to_frame(),on="date",how="left")
    Confirmed_cases.rename(columns={"ncumul_conf":cantons_namelist[i]},inplace=True)
    
Confirmed_cases=Confirmed_cases.drop(columns=[0])
Confirmed_cases.index = pd.to_datetime(Confirmed_cases.index)
# use last day's data to fill in NA
Confirmed_cases=Confirmed_cases.fillna(method='ffill')
Confirmed_cases['Whole Switzerland'] = Confirmed_cases.apply(lambda x: x.sum(), axis=1)
#second-caculate new confirmed cases day by day
new_confirmed_cases=Confirmed_cases.diff() 

for i in range(0,len(cantons)):
    cantons[i].index=cantons[i]["date"]
recover=pd.DataFrame(np.random.randn(len(GE.index),1),index=GE.index)

for i in range(0,len(cantons)):
    recover=pd.merge(recover,cantons[i]["ncumul_released"].to_frame(),on="date",how="left")
    recover.rename(columns={"ncumul_released":cantons_namelist[i]},inplace=True)
    
recover=recover.drop(columns=[0])
recover.index = pd.to_datetime(recover.index)
# use last day's data to fill in NA
recover=recover.fillna(method='ffill')
recover['Recover'] = recover.apply(lambda x: x.sum(), axis=1)

#data processing of R numbers
R_numbers_ch=R_numbers[R_numbers["region"]=="CHE"]
R_numbers_ch=R_numbers_ch[R_numbers_ch["data_type"]=="Confirmed cases"]
R_numbers_ch=R_numbers_ch[R_numbers_ch["estimate_type"]=="Cori_step"]
R_numbers_ch["date"]=pd.to_datetime(R_numbers_ch["date"])
R_numbers_ch.index=R_numbers_ch["date"]

#merge all control variable and depend variable
test=pd.merge(new_confirmed_cases["Whole Switzerland"].to_frame(),R_numbers_ch["median_R_mean"].to_frame(),on="date",how="left")
test=pd.merge(test,recover["Recover"].to_frame(),on="date",how="left")
test=pd.merge(test,Confirmed_cases["Whole Switzerland"].to_frame(),on="date",how="left")
test=test[test.index>="2020-02-26"]
test=test[R_numbers_ch["date"][-1]>=test.index]
test.rename(columns={"Whole Switzerland_x":"New_Confirmed_cases","Whole Switzerland_y":"Cumulated_Confirmed_Cases"},inplace=True)

#Using random forest
#split data into testing model and training model
X = test.drop('New_Confirmed_cases',axis=1)
y = test['New_Confirmed_cases']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)
#fit
rf=RandomForestRegressor(n_estimators = 1000, random_state = 101)
rf.fit(X_train, y_train)
## Use the forest's predict method on the test data
predictions = rf.predict(X_test)
# Calculate the absolute errors
errors = abs(predictions - y_test)
# Print out the mean absolute error (mae)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')

#plot the results
a=pd.DataFrame(predictions.astype(float),index=y_test.index)
a=a.sort_values("date")
b=y_test.to_frame().sort_values("date")
results=pd.merge(a,b,on="date",how="left")
results.rename(columns={0:"Prediction","New_Confirmed_cases":"Actual"},inplace=True)
plt.subplots(1,1,figsize=(18,6))
plt.plot(results.index,results["Prediction"],color="blue")
plt.plot(results.index,results["Actual"],color="red")
plt.xticks(rotation=45)
plt.title("Actual vs Predtictions",fontsize=15)
plt.legend()
plt.grid()
